{"ast":null,"code":"import React,{createContext,useContext,useReducer,useEffect,useRef}from'react';import{io}from'socket.io-client';import{sessionAPI}from'../utils/api';import{jsx as _jsx}from\"react/jsx-runtime\";const SessionContext=/*#__PURE__*/createContext();const initialState={session:null,user:null,socket:null,stories:[],activeStory:null,votes:{},voteCount:0,totalMembers:0,isRevealed:false};function reducer(state,action){switch(action.type){case'SET':{// Always ensure stories is an array if present\nlet payload={...action.payload};if('stories'in payload&&!Array.isArray(payload.stories)){payload.stories=[];}return{...state,...payload};}case'ADD_MEMBER':return{...state,session:{...state.session,members:[...state.session.members,action.payload]}};case'ADD_STORY':// Add new story to the beginning of the array\nreturn{...state,stories:[action.payload,...state.stories]};case'SET_ACTIVE':return{...state,activeStory:action.payload};case'SET_VOTE_COUNT':return{...state,voteCount:action.payload.voteCount,totalMembers:action.payload.totalMembers};case'SET_VOTES':return{...state,votes:action.payload};case'SET_REVEALED':return{...state,isRevealed:action.payload};// CLEAR_VOTES feature removed\ndefault:return state;}}export function SessionProvider(_ref){var _state$session;let{children}=_ref;const[state,dispatch]=useReducer(reducer,initialState);const sessionIdRef=useRef(null);sessionIdRef.current=(_state$session=state.session)===null||_state$session===void 0?void 0:_state$session.id;useEffect(()=>{const socket=io('http://localhost:5000');dispatch({type:'SET',payload:{socket}});socket.on('memberJoined',async()=>{if(sessionIdRef.current){const updatedSession=await sessionAPI.getSession(sessionIdRef.current);// Always show active story first\nlet stories=updatedSession.stories;if(updatedSession.activeStoryId){const activeStory=updatedSession.stories.find(s=>s.id===updatedSession.activeStoryId);if(activeStory){stories=[activeStory,...updatedSession.stories.filter(s=>s.id!==activeStory.id)];}}dispatch({type:'SET',payload:{session:updatedSession,stories}});}});socket.on('storyCreated',async()=>{if(sessionIdRef.current){var _newActiveStory;const updatedSession=await sessionAPI.getSession(sessionIdRef.current);let stories=[...updatedSession.stories.filter(Boolean)];let newActiveStory=null;if(updatedSession.activeStoryId){newActiveStory=stories.find(s=>s.id===updatedSession.activeStoryId)||null;}if(!newActiveStory&&stories.length>0){newActiveStory=stories[stories.length-1];}// Always keep the active story at the top, no duplicates\nif(newActiveStory){stories=[newActiveStory,...stories.filter(s=>s.id!==newActiveStory.id)];}// Use backend voteCount and totalMembers\nconst voteCount=typeof((_newActiveStory=newActiveStory)===null||_newActiveStory===void 0?void 0:_newActiveStory.voteCount)==='number'&&!isNaN(newActiveStory.voteCount)?newActiveStory.voteCount:0;const totalMembers=Array.isArray(updatedSession.members)?updatedSession.members.length:0;dispatch({type:'SET',payload:{session:{...updatedSession},stories:[...stories],activeStory:newActiveStory,votes:{},voteCount,totalMembers,isRevealed:false}});}});socket.on('activeStoryChanged',async id=>{if(sessionIdRef.current){const updatedSession=await sessionAPI.getSession(sessionIdRef.current);const newActiveStory=updatedSession.stories.find(s=>s.id===id)||null;let stories=[...updatedSession.stories.filter(Boolean)];// Always ensure the active story is present in the stories array, no duplicates\nif(newActiveStory){stories=[newActiveStory,...stories.filter(s=>s.id!==newActiveStory.id)];}dispatch({type:'SET',payload:{session:updatedSession,stories,activeStory:newActiveStory,votes:(newActiveStory===null||newActiveStory===void 0?void 0:newActiveStory.votes)||{},voteCount:(newActiveStory===null||newActiveStory===void 0?void 0:newActiveStory.voteCount)||0,isRevealed:!!(newActiveStory!==null&&newActiveStory!==void 0&&newActiveStory.isRevealed)}});}});socket.on('voteCountChanged',data=>{// Fetch the latest session data and always keep the active story in the stories array\n(async()=>{if(sessionIdRef.current){var _newActiveStory2,_newActiveStory3,_newActiveStory4;const updatedSession=await sessionAPI.getSession(sessionIdRef.current);let stories=[...updatedSession.stories.filter(Boolean)];let newActiveStory=null;if(updatedSession.activeStoryId){newActiveStory=stories.find(s=>s.id===updatedSession.activeStoryId)||null;}if(!newActiveStory&&stories.length>0){newActiveStory=stories[stories.length-1];}// Always keep the active story at the top, no duplicates\nif(newActiveStory){stories=[newActiveStory,...stories.filter(s=>s.id!==newActiveStory.id)];}// Use the latest votes, voteCount, and totalMembers from the backend\nconst votes=((_newActiveStory2=newActiveStory)===null||_newActiveStory2===void 0?void 0:_newActiveStory2.votes)||{};// Always use the backend's voteCount for the active story, fallback to 0 if undefined\nconst voteCount=typeof((_newActiveStory3=newActiveStory)===null||_newActiveStory3===void 0?void 0:_newActiveStory3.voteCount)==='number'&&!isNaN(newActiveStory.voteCount)?newActiveStory.voteCount:0;const totalMembers=Array.isArray(updatedSession.members)?updatedSession.members.length:0;const isRevealed=!!((_newActiveStory4=newActiveStory)!==null&&_newActiveStory4!==void 0&&_newActiveStory4.isRevealed);dispatch({type:'SET',payload:{session:updatedSession,stories,activeStory:newActiveStory,votes,voteCount,totalMembers,isRevealed}});}})();});socket.on('votesRevealed',data=>{// After votes are revealed, fetch the latest session and keep the active story if present\n(async()=>{if(sessionIdRef.current){var _newActiveStory5,_newActiveStory6,_newActiveStory7;const updatedSession=await sessionAPI.getSession(sessionIdRef.current);let stories=[...updatedSession.stories.filter(Boolean)];let newActiveStory=null;if(updatedSession.activeStoryId){newActiveStory=stories.find(s=>s.id===updatedSession.activeStoryId)||null;}if(!newActiveStory&&stories.length>0){newActiveStory=stories[stories.length-1];}// Always keep the active story at the top, no duplicates\nif(newActiveStory){stories=[newActiveStory,...stories.filter(s=>s.id!==newActiveStory.id)];}// Use backend values for votes, voteCount, and totalMembers\nconst votes=((_newActiveStory5=newActiveStory)===null||_newActiveStory5===void 0?void 0:_newActiveStory5.votes)||{};const voteCount=typeof((_newActiveStory6=newActiveStory)===null||_newActiveStory6===void 0?void 0:_newActiveStory6.voteCount)==='number'&&!isNaN(newActiveStory.voteCount)?newActiveStory.voteCount:0;const totalMembers=Array.isArray(updatedSession.members)?updatedSession.members.length:0;const isRevealed=!!((_newActiveStory7=newActiveStory)!==null&&_newActiveStory7!==void 0&&_newActiveStory7.isRevealed);dispatch({type:'SET',payload:{session:updatedSession,stories,activeStory:newActiveStory,votes,voteCount,totalMembers,isRevealed}});}})();});// votesCleared handler removed (feature deprecated)\nreturn()=>socket.disconnect();},[]);return/*#__PURE__*/_jsx(SessionContext.Provider,{value:{...state,dispatch},children:children});}export function useSession(){return useContext(SessionContext);}","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useRef","io","sessionAPI","jsx","_jsx","SessionContext","initialState","session","user","socket","stories","activeStory","votes","voteCount","totalMembers","isRevealed","reducer","state","action","type","payload","Array","isArray","members","SessionProvider","_ref","_state$session","children","dispatch","sessionIdRef","current","id","on","updatedSession","getSession","activeStoryId","find","s","filter","_newActiveStory","Boolean","newActiveStory","length","isNaN","data","_newActiveStory2","_newActiveStory3","_newActiveStory4","_newActiveStory5","_newActiveStory6","_newActiveStory7","disconnect","Provider","value","useSession"],"sources":["C:/Users/abhis/Downloads/story-pointing-app/frontend/src/contexts/SessionContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { sessionAPI } from '../utils/api';\r\n\r\nconst SessionContext = createContext();\r\nconst initialState = {\r\n  session:null, user:null, socket:null,\r\n  stories:[], activeStory:null,\r\n  votes:{}, voteCount:0, totalMembers:0,\r\n  isRevealed:false\r\n};\r\n\r\nfunction reducer(state,action){\r\n  switch(action.type){\r\n    case 'SET': {\r\n      // Always ensure stories is an array if present\r\n      let payload = {...action.payload};\r\n      if ('stories' in payload && !Array.isArray(payload.stories)) {\r\n        payload.stories = [];\r\n      }\r\n      return {...state, ...payload};\r\n    }\r\n    case 'ADD_MEMBER': return {\r\n      ...state,\r\n      session:{...state.session,members:[...state.session.members,action.payload]}\r\n    };\r\n    case 'ADD_STORY':\r\n      // Add new story to the beginning of the array\r\n      return {...state,stories:[action.payload, ...state.stories]};\r\n    case 'SET_ACTIVE': return {...state,activeStory:action.payload};\r\n    case 'SET_VOTE_COUNT':\r\n      return {...state,voteCount:action.payload.voteCount,totalMembers:action.payload.totalMembers};\r\n    case 'SET_VOTES': return {...state,votes:action.payload};\r\n    case 'SET_REVEALED': return {...state,isRevealed:action.payload};\r\n    // CLEAR_VOTES feature removed\r\n    default: return state;\r\n  }\r\n}\r\n\r\n\r\n  export function SessionProvider({ children }) {\r\n    const [state,dispatch] = useReducer(reducer,initialState);\r\n  const sessionIdRef = useRef(null);\r\n  sessionIdRef.current = state.session?.id;\r\n\r\n  useEffect(()=>{\r\n    const socket = io('http://localhost:5000');\r\n    dispatch({type:'SET',payload:{socket}});\r\n\r\n    socket.on('memberJoined',async()=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        // Always show active story first\r\n        let stories = updatedSession.stories;\r\n        if (updatedSession.activeStoryId) {\r\n          const activeStory = updatedSession.stories.find(s => s.id === updatedSession.activeStoryId);\r\n          if (activeStory) {\r\n            stories = [activeStory, ...updatedSession.stories.filter(s => s.id !== activeStory.id)];\r\n          }\r\n        }\r\n        dispatch({type:'SET',payload:{session: updatedSession, stories}});\r\n      }\r\n    });\r\n    socket.on('storyCreated',async()=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        let stories = [...updatedSession.stories.filter(Boolean)];\r\n        let newActiveStory = null;\r\n        if (updatedSession.activeStoryId) {\r\n          newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\r\n        }\r\n        if (!newActiveStory && stories.length > 0) {\r\n          newActiveStory = stories[stories.length - 1];\r\n        }\r\n        // Always keep the active story at the top, no duplicates\r\n        if (newActiveStory) {\r\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n        }\r\n        // Use backend voteCount and totalMembers\r\n        const voteCount = typeof newActiveStory?.voteCount === 'number' && !isNaN(newActiveStory.voteCount) ? newActiveStory.voteCount : 0;\r\n        const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\r\n        dispatch({type:'SET',payload:{\r\n          session: { ...updatedSession },\r\n          stories: [...stories],\r\n          activeStory: newActiveStory,\r\n          votes: {},\r\n          voteCount,\r\n          totalMembers,\r\n          isRevealed: false\r\n        }});\r\n      }\r\n    });\r\n    socket.on('activeStoryChanged',async id=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        const newActiveStory = updatedSession.stories.find(s=>s.id===id) || null;\r\n        let stories = [...updatedSession.stories.filter(Boolean)];\r\n        // Always ensure the active story is present in the stories array, no duplicates\r\n        if (newActiveStory) {\r\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n        }\r\n        dispatch({\r\n          type: 'SET',\r\n          payload: {\r\n            session: updatedSession,\r\n            stories,\r\n            activeStory: newActiveStory,\r\n            votes: newActiveStory?.votes || {},\r\n            voteCount: newActiveStory?.voteCount || 0,\r\n            isRevealed: !!newActiveStory?.isRevealed\r\n          }\r\n        });\r\n      }\r\n    });\r\n    socket.on('voteCountChanged',data=>{\r\n      // Fetch the latest session data and always keep the active story in the stories array\r\n      (async () => {\r\n        if (sessionIdRef.current) {\r\n          const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n          let stories = [...updatedSession.stories.filter(Boolean)];\r\n          let newActiveStory = null;\r\n          if (updatedSession.activeStoryId) {\r\n            newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\r\n          }\r\n          if (!newActiveStory && stories.length > 0) {\r\n            newActiveStory = stories[stories.length - 1];\r\n          }\r\n          // Always keep the active story at the top, no duplicates\r\n          if (newActiveStory) {\r\n            stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n          }\r\n          // Use the latest votes, voteCount, and totalMembers from the backend\r\n          const votes = newActiveStory?.votes || {};\r\n          // Always use the backend's voteCount for the active story, fallback to 0 if undefined\r\n          const voteCount = (typeof newActiveStory?.voteCount === 'number' && !isNaN(newActiveStory.voteCount)) ? newActiveStory.voteCount : 0;\r\n          const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\r\n          const isRevealed = !!newActiveStory?.isRevealed;\r\n          dispatch({\r\n            type: 'SET',\r\n            payload: {\r\n              session: updatedSession,\r\n              stories,\r\n              activeStory: newActiveStory,\r\n              votes,\r\n              voteCount,\r\n              totalMembers,\r\n              isRevealed\r\n            }\r\n          });\r\n        }\r\n      })();\r\n    });\r\n    socket.on('votesRevealed',data=>{\r\n      // After votes are revealed, fetch the latest session and keep the active story if present\r\n      (async () => {\r\n        if (sessionIdRef.current) {\r\n          const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n          let stories = [...updatedSession.stories.filter(Boolean)];\r\n          let newActiveStory = null;\r\n          if (updatedSession.activeStoryId) {\r\n            newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\r\n          }\r\n          if (!newActiveStory && stories.length > 0) {\r\n            newActiveStory = stories[stories.length - 1];\r\n          }\r\n          // Always keep the active story at the top, no duplicates\r\n          if (newActiveStory) {\r\n            stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n          }\r\n          // Use backend values for votes, voteCount, and totalMembers\r\n          const votes = newActiveStory?.votes || {};\r\n          const voteCount = (typeof newActiveStory?.voteCount === 'number' && !isNaN(newActiveStory.voteCount)) ? newActiveStory.voteCount : 0;\r\n          const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\r\n          const isRevealed = !!newActiveStory?.isRevealed;\r\n          dispatch({\r\n            type: 'SET',\r\n            payload: {\r\n              session: updatedSession,\r\n              stories,\r\n              activeStory: newActiveStory,\r\n              votes,\r\n              voteCount,\r\n              totalMembers,\r\n              isRevealed\r\n            }\r\n          });\r\n        }\r\n      })();\r\n    });\r\n    // votesCleared handler removed (feature deprecated)\r\n\r\n    return ()=>socket.disconnect();\r\n  },[]);\r\n\r\n  return (\r\n    <SessionContext.Provider value={{...state,dispatch}}>\r\n      {children}\r\n\r\n    </SessionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useSession(){\r\n  return useContext(SessionContext);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}