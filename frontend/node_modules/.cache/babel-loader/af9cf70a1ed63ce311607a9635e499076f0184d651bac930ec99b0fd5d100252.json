{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhis\\\\Downloads\\\\story-pointing-app\\\\frontend\\\\src\\\\contexts\\\\SessionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { sessionAPI } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionContext = /*#__PURE__*/createContext();\nconst initialState = {\n  session: null,\n  user: null,\n  socket: null,\n  stories: [],\n  activeStory: null,\n  votes: {},\n  voteCount: 0,\n  totalMembers: 0,\n  isRevealed: false\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET':\n      {\n        // Always ensure stories is an array if present\n        let payload = {\n          ...action.payload\n        };\n        if ('stories' in payload && !Array.isArray(payload.stories)) {\n          payload.stories = [];\n        }\n        return {\n          ...state,\n          ...payload\n        };\n      }\n    case 'ADD_MEMBER':\n      return {\n        ...state,\n        session: {\n          ...state.session,\n          members: [...state.session.members, action.payload]\n        }\n      };\n    case 'ADD_STORY':\n      // Add new story to the beginning of the array\n      return {\n        ...state,\n        stories: [action.payload, ...state.stories]\n      };\n    case 'SET_ACTIVE':\n      return {\n        ...state,\n        activeStory: action.payload\n      };\n    case 'SET_VOTE_COUNT':\n      return {\n        ...state,\n        voteCount: action.payload.voteCount,\n        totalMembers: action.payload.totalMembers\n      };\n    case 'SET_VOTES':\n      return {\n        ...state,\n        votes: action.payload\n      };\n    case 'SET_REVEALED':\n      return {\n        ...state,\n        isRevealed: action.payload\n      };\n    // CLEAR_VOTES feature removed\n    default:\n      return state;\n  }\n}\nexport function SessionProvider({\n  children\n}) {\n  _s();\n  var _state$session;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const sessionIdRef = useRef(null);\n  sessionIdRef.current = (_state$session = state.session) === null || _state$session === void 0 ? void 0 : _state$session.id;\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n    dispatch({\n      type: 'SET',\n      payload: {\n        socket\n      }\n    });\n    socket.on('memberJoined', async () => {\n      if (sessionIdRef.current) {\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n        // Always show active story first\n        let stories = updatedSession.stories;\n        if (updatedSession.activeStoryId) {\n          const activeStory = updatedSession.stories.find(s => s.id === updatedSession.activeStoryId);\n          if (activeStory) {\n            stories = [activeStory, ...updatedSession.stories.filter(s => s.id !== activeStory.id)];\n          }\n        }\n        dispatch({\n          type: 'SET',\n          payload: {\n            session: updatedSession,\n            stories\n          }\n        });\n      }\n    });\n    socket.on('storyCreated', async () => {\n      if (sessionIdRef.current) {\n        var _newActiveStory;\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n        let stories = [...updatedSession.stories.filter(Boolean)];\n        let newActiveStory = null;\n        if (updatedSession.activeStoryId) {\n          newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\n        }\n        if (!newActiveStory && stories.length > 0) {\n          newActiveStory = stories[stories.length - 1];\n        }\n        // Always keep the active story at the top, no duplicates\n        if (newActiveStory) {\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\n        }\n        // Use backend voteCount and totalMembers\n        const voteCount = typeof ((_newActiveStory = newActiveStory) === null || _newActiveStory === void 0 ? void 0 : _newActiveStory.voteCount) === 'number' && !isNaN(newActiveStory.voteCount) ? newActiveStory.voteCount : 0;\n        const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\n        dispatch({\n          type: 'SET',\n          payload: {\n            session: {\n              ...updatedSession\n            },\n            stories: [...stories],\n            activeStory: newActiveStory,\n            votes: {},\n            voteCount,\n            totalMembers,\n            isRevealed: false\n          }\n        });\n      }\n    });\n    socket.on('activeStoryChanged', async id => {\n      if (sessionIdRef.current) {\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n        const newActiveStory = updatedSession.stories.find(s => s.id === id) || null;\n        let stories = [...updatedSession.stories.filter(Boolean)];\n        // Always ensure the active story is present in the stories array, no duplicates\n        if (newActiveStory) {\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\n        }\n        dispatch({\n          type: 'SET',\n          payload: {\n            session: updatedSession,\n            stories,\n            activeStory: newActiveStory,\n            votes: (newActiveStory === null || newActiveStory === void 0 ? void 0 : newActiveStory.votes) || {},\n            voteCount: (newActiveStory === null || newActiveStory === void 0 ? void 0 : newActiveStory.voteCount) || 0,\n            isRevealed: !!(newActiveStory !== null && newActiveStory !== void 0 && newActiveStory.isRevealed)\n          }\n        });\n      }\n    });\n    socket.on('voteCountChanged', data => {\n      // Fetch the latest session data and always keep the active story in the stories array\n      (async () => {\n        if (sessionIdRef.current) {\n          var _newActiveStory2, _newActiveStory3, _newActiveStory4;\n          const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n          let stories = [...updatedSession.stories.filter(Boolean)];\n          let newActiveStory = null;\n          if (updatedSession.activeStoryId) {\n            newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\n          }\n          if (!newActiveStory && stories.length > 0) {\n            newActiveStory = stories[stories.length - 1];\n          }\n          // Always keep the active story at the top, no duplicates\n          if (newActiveStory) {\n            stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\n          }\n          // Use the latest votes, voteCount, and totalMembers from the backend\n          const votes = ((_newActiveStory2 = newActiveStory) === null || _newActiveStory2 === void 0 ? void 0 : _newActiveStory2.votes) || {};\n          // Always use the backend's voteCount for the active story, fallback to 0 if undefined\n          const voteCount = typeof ((_newActiveStory3 = newActiveStory) === null || _newActiveStory3 === void 0 ? void 0 : _newActiveStory3.voteCount) === 'number' && !isNaN(newActiveStory.voteCount) ? newActiveStory.voteCount : 0;\n          const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\n          const isRevealed = !!((_newActiveStory4 = newActiveStory) !== null && _newActiveStory4 !== void 0 && _newActiveStory4.isRevealed);\n          dispatch({\n            type: 'SET',\n            payload: {\n              session: updatedSession,\n              stories,\n              activeStory: newActiveStory,\n              votes,\n              voteCount,\n              totalMembers,\n              isRevealed\n            }\n          });\n        }\n      })();\n    });\n    socket.on('votesRevealed', data => {\n      // After votes are revealed, fetch the latest session and keep the active story if present\n      (async () => {\n        if (sessionIdRef.current) {\n          var _newActiveStory5, _newActiveStory6, _newActiveStory7;\n          const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n          let stories = [...updatedSession.stories.filter(Boolean)];\n          let newActiveStory = null;\n          if (updatedSession.activeStoryId) {\n            newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\n          }\n          if (!newActiveStory && stories.length > 0) {\n            newActiveStory = stories[stories.length - 1];\n          }\n          // Always keep the active story at the top, no duplicates\n          if (newActiveStory) {\n            stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\n          }\n          // Use backend values for votes, voteCount, and totalMembers\n          const votes = ((_newActiveStory5 = newActiveStory) === null || _newActiveStory5 === void 0 ? void 0 : _newActiveStory5.votes) || {};\n          const voteCount = typeof ((_newActiveStory6 = newActiveStory) === null || _newActiveStory6 === void 0 ? void 0 : _newActiveStory6.voteCount) === 'number' && !isNaN(newActiveStory.voteCount) ? newActiveStory.voteCount : 0;\n          const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\n          const isRevealed = !!((_newActiveStory7 = newActiveStory) !== null && _newActiveStory7 !== void 0 && _newActiveStory7.isRevealed);\n          dispatch({\n            type: 'SET',\n            payload: {\n              session: updatedSession,\n              stories,\n              activeStory: newActiveStory,\n              votes,\n              voteCount,\n              totalMembers,\n              isRevealed\n            }\n          });\n        }\n      })();\n    });\n    // votesCleared handler removed (feature deprecated)\n\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: {\n      ...state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(SessionProvider, \"Pgz1L/7i03p6HU79hT0C3nopsWE=\");\n_c = SessionProvider;\nexport function useSession() {\n  _s2();\n  return useContext(SessionContext);\n}\n_s2(useSession, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useRef","io","sessionAPI","jsxDEV","_jsxDEV","SessionContext","initialState","session","user","socket","stories","activeStory","votes","voteCount","totalMembers","isRevealed","reducer","state","action","type","payload","Array","isArray","members","SessionProvider","children","_s","_state$session","dispatch","sessionIdRef","current","id","on","updatedSession","getSession","activeStoryId","find","s","filter","_newActiveStory","Boolean","newActiveStory","length","isNaN","data","_newActiveStory2","_newActiveStory3","_newActiveStory4","_newActiveStory5","_newActiveStory6","_newActiveStory7","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSession","_s2","$RefreshReg$"],"sources":["C:/Users/abhis/Downloads/story-pointing-app/frontend/src/contexts/SessionContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { sessionAPI } from '../utils/api';\r\n\r\nconst SessionContext = createContext();\r\nconst initialState = {\r\n  session:null, user:null, socket:null,\r\n  stories:[], activeStory:null,\r\n  votes:{}, voteCount:0, totalMembers:0,\r\n  isRevealed:false\r\n};\r\n\r\nfunction reducer(state,action){\r\n  switch(action.type){\r\n    case 'SET': {\r\n      // Always ensure stories is an array if present\r\n      let payload = {...action.payload};\r\n      if ('stories' in payload && !Array.isArray(payload.stories)) {\r\n        payload.stories = [];\r\n      }\r\n      return {...state, ...payload};\r\n    }\r\n    case 'ADD_MEMBER': return {\r\n      ...state,\r\n      session:{...state.session,members:[...state.session.members,action.payload]}\r\n    };\r\n    case 'ADD_STORY':\r\n      // Add new story to the beginning of the array\r\n      return {...state,stories:[action.payload, ...state.stories]};\r\n    case 'SET_ACTIVE': return {...state,activeStory:action.payload};\r\n    case 'SET_VOTE_COUNT':\r\n      return {...state,voteCount:action.payload.voteCount,totalMembers:action.payload.totalMembers};\r\n    case 'SET_VOTES': return {...state,votes:action.payload};\r\n    case 'SET_REVEALED': return {...state,isRevealed:action.payload};\r\n    // CLEAR_VOTES feature removed\r\n    default: return state;\r\n  }\r\n}\r\n\r\n\r\n  export function SessionProvider({ children }) {\r\n    const [state,dispatch] = useReducer(reducer,initialState);\r\n  const sessionIdRef = useRef(null);\r\n  sessionIdRef.current = state.session?.id;\r\n\r\n  useEffect(()=>{\r\n    const socket = io('http://localhost:5000');\r\n    dispatch({type:'SET',payload:{socket}});\r\n\r\n    socket.on('memberJoined',async()=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        // Always show active story first\r\n        let stories = updatedSession.stories;\r\n        if (updatedSession.activeStoryId) {\r\n          const activeStory = updatedSession.stories.find(s => s.id === updatedSession.activeStoryId);\r\n          if (activeStory) {\r\n            stories = [activeStory, ...updatedSession.stories.filter(s => s.id !== activeStory.id)];\r\n          }\r\n        }\r\n        dispatch({type:'SET',payload:{session: updatedSession, stories}});\r\n      }\r\n    });\r\n    socket.on('storyCreated',async()=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        let stories = [...updatedSession.stories.filter(Boolean)];\r\n        let newActiveStory = null;\r\n        if (updatedSession.activeStoryId) {\r\n          newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\r\n        }\r\n        if (!newActiveStory && stories.length > 0) {\r\n          newActiveStory = stories[stories.length - 1];\r\n        }\r\n        // Always keep the active story at the top, no duplicates\r\n        if (newActiveStory) {\r\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n        }\r\n        // Use backend voteCount and totalMembers\r\n        const voteCount = typeof newActiveStory?.voteCount === 'number' && !isNaN(newActiveStory.voteCount) ? newActiveStory.voteCount : 0;\r\n        const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\r\n        dispatch({type:'SET',payload:{\r\n          session: { ...updatedSession },\r\n          stories: [...stories],\r\n          activeStory: newActiveStory,\r\n          votes: {},\r\n          voteCount,\r\n          totalMembers,\r\n          isRevealed: false\r\n        }});\r\n      }\r\n    });\r\n    socket.on('activeStoryChanged',async id=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        const newActiveStory = updatedSession.stories.find(s=>s.id===id) || null;\r\n        let stories = [...updatedSession.stories.filter(Boolean)];\r\n        // Always ensure the active story is present in the stories array, no duplicates\r\n        if (newActiveStory) {\r\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n        }\r\n        dispatch({\r\n          type: 'SET',\r\n          payload: {\r\n            session: updatedSession,\r\n            stories,\r\n            activeStory: newActiveStory,\r\n            votes: newActiveStory?.votes || {},\r\n            voteCount: newActiveStory?.voteCount || 0,\r\n            isRevealed: !!newActiveStory?.isRevealed\r\n          }\r\n        });\r\n      }\r\n    });\r\n    socket.on('voteCountChanged',data=>{\r\n      // Fetch the latest session data and always keep the active story in the stories array\r\n      (async () => {\r\n        if (sessionIdRef.current) {\r\n          const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n          let stories = [...updatedSession.stories.filter(Boolean)];\r\n          let newActiveStory = null;\r\n          if (updatedSession.activeStoryId) {\r\n            newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\r\n          }\r\n          if (!newActiveStory && stories.length > 0) {\r\n            newActiveStory = stories[stories.length - 1];\r\n          }\r\n          // Always keep the active story at the top, no duplicates\r\n          if (newActiveStory) {\r\n            stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n          }\r\n          // Use the latest votes, voteCount, and totalMembers from the backend\r\n          const votes = newActiveStory?.votes || {};\r\n          // Always use the backend's voteCount for the active story, fallback to 0 if undefined\r\n          const voteCount = (typeof newActiveStory?.voteCount === 'number' && !isNaN(newActiveStory.voteCount)) ? newActiveStory.voteCount : 0;\r\n          const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\r\n          const isRevealed = !!newActiveStory?.isRevealed;\r\n          dispatch({\r\n            type: 'SET',\r\n            payload: {\r\n              session: updatedSession,\r\n              stories,\r\n              activeStory: newActiveStory,\r\n              votes,\r\n              voteCount,\r\n              totalMembers,\r\n              isRevealed\r\n            }\r\n          });\r\n        }\r\n      })();\r\n    });\r\n    socket.on('votesRevealed',data=>{\r\n      // After votes are revealed, fetch the latest session and keep the active story if present\r\n      (async () => {\r\n        if (sessionIdRef.current) {\r\n          const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n          let stories = [...updatedSession.stories.filter(Boolean)];\r\n          let newActiveStory = null;\r\n          if (updatedSession.activeStoryId) {\r\n            newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\r\n          }\r\n          if (!newActiveStory && stories.length > 0) {\r\n            newActiveStory = stories[stories.length - 1];\r\n          }\r\n          // Always keep the active story at the top, no duplicates\r\n          if (newActiveStory) {\r\n            stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n          }\r\n          // Use backend values for votes, voteCount, and totalMembers\r\n          const votes = newActiveStory?.votes || {};\r\n          const voteCount = (typeof newActiveStory?.voteCount === 'number' && !isNaN(newActiveStory.voteCount)) ? newActiveStory.voteCount : 0;\r\n          const totalMembers = Array.isArray(updatedSession.members) ? updatedSession.members.length : 0;\r\n          const isRevealed = !!newActiveStory?.isRevealed;\r\n          dispatch({\r\n            type: 'SET',\r\n            payload: {\r\n              session: updatedSession,\r\n              stories,\r\n              activeStory: newActiveStory,\r\n              votes,\r\n              voteCount,\r\n              totalMembers,\r\n              isRevealed\r\n            }\r\n          });\r\n        }\r\n      })();\r\n    });\r\n    // votesCleared handler removed (feature deprecated)\r\n\r\n    return ()=>socket.disconnect();\r\n  },[]);\r\n\r\n  return (\r\n    <SessionContext.Provider value={{...state,dispatch}}>\r\n      {children}\r\n\r\n    </SessionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useSession(){\r\n  return useContext(SessionContext);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}