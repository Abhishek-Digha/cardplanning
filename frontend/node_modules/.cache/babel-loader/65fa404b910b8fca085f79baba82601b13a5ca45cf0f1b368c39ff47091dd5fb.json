{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhis\\\\Downloads\\\\story-pointing-app\\\\frontend\\\\src\\\\contexts\\\\SessionContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { sessionAPI } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SessionContext = /*#__PURE__*/createContext();\nconst initialState = {\n  session: null,\n  user: null,\n  socket: null,\n  stories: [],\n  activeStory: null,\n  votes: {},\n  voteCount: 0,\n  totalMembers: 0,\n  isRevealed: false\n};\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET':\n      {\n        // Always ensure stories is an array if present\n        let payload = {\n          ...action.payload\n        };\n        if ('stories' in payload && !Array.isArray(payload.stories)) {\n          payload.stories = [];\n        }\n        return {\n          ...state,\n          ...payload\n        };\n      }\n    case 'ADD_MEMBER':\n      return {\n        ...state,\n        session: {\n          ...state.session,\n          members: [...state.session.members, action.payload]\n        }\n      };\n    case 'ADD_STORY':\n      // Add new story to the beginning of the array\n      return {\n        ...state,\n        stories: [action.payload, ...state.stories]\n      };\n    case 'SET_ACTIVE':\n      return {\n        ...state,\n        activeStory: action.payload\n      };\n    case 'SET_VOTE_COUNT':\n      return {\n        ...state,\n        voteCount: action.payload.voteCount,\n        totalMembers: action.payload.totalMembers\n      };\n    case 'SET_VOTES':\n      return {\n        ...state,\n        votes: action.payload\n      };\n    case 'SET_REVEALED':\n      return {\n        ...state,\n        isRevealed: action.payload\n      };\n    // CLEAR_VOTES feature removed\n    default:\n      return state;\n  }\n}\nexport function SessionProvider({\n  children\n}) {\n  _s();\n  var _state$session;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const sessionIdRef = useRef(null);\n  sessionIdRef.current = (_state$session = state.session) === null || _state$session === void 0 ? void 0 : _state$session.id;\n  useEffect(() => {\n    const socket = io('http://localhost:5000');\n    dispatch({\n      type: 'SET',\n      payload: {\n        socket\n      }\n    });\n    socket.on('memberJoined', async () => {\n      if (sessionIdRef.current) {\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n        // Always show active story first\n        let stories = updatedSession.stories;\n        if (updatedSession.activeStoryId) {\n          const activeStory = updatedSession.stories.find(s => s.id === updatedSession.activeStoryId);\n          if (activeStory) {\n            stories = [activeStory, ...updatedSession.stories.filter(s => s.id !== activeStory.id)];\n          }\n        }\n        dispatch({\n          type: 'SET',\n          payload: {\n            session: updatedSession,\n            stories\n          }\n        });\n      }\n    });\n    socket.on('storyCreated', async () => {\n      if (sessionIdRef.current) {\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n        let stories = [...updatedSession.stories.filter(Boolean)];\n        let newActiveStory = null;\n        if (updatedSession.activeStoryId) {\n          newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\n        }\n        if (!newActiveStory && stories.length > 0) {\n          newActiveStory = stories[stories.length - 1];\n        }\n        // Move the new/active story to the top, but keep all stories\n        if (newActiveStory) {\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\n        }\n        dispatch({\n          type: 'SET',\n          payload: {\n            session: {\n              ...updatedSession\n            },\n            stories: [...stories],\n            activeStory: newActiveStory,\n            votes: {},\n            voteCount: 0,\n            totalMembers: 0,\n            isRevealed: false\n          }\n        });\n      }\n    });\n    socket.on('activeStoryChanged', async id => {\n      if (sessionIdRef.current) {\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\n        const newActiveStory = updatedSession.stories.find(s => s.id === id) || null;\n        // Always set votes to the story's votes, regardless of reveal state\n        // Move the active story to the top of the list\n        const stories = [newActiveStory, ...updatedSession.stories.filter(s => s.id !== newActiveStory.id)];\n        dispatch({\n          type: 'SET',\n          payload: {\n            session: updatedSession,\n            stories,\n            activeStory: newActiveStory,\n            votes: (newActiveStory === null || newActiveStory === void 0 ? void 0 : newActiveStory.votes) || {},\n            voteCount: (newActiveStory === null || newActiveStory === void 0 ? void 0 : newActiveStory.voteCount) || 0,\n            isRevealed: !!(newActiveStory !== null && newActiveStory !== void 0 && newActiveStory.isRevealed)\n          }\n        });\n      }\n    });\n    socket.on('voteCountChanged', data => {\n      // Update both voteCount/totalMembers and the votes object for real-time status\n      dispatch(prevState => {\n        let activeStory = prevState.activeStory;\n        let stories = prevState.stories;\n        // Merge in the user's own vote if available (for instant feedback)\n        let votes = {\n          ...prevState.votes,\n          ...(data.votes || {})\n        };\n        if (activeStory && !stories.find(s => s.id === activeStory.id)) {\n          stories = [activeStory, ...stories];\n        }\n        return {\n          type: 'SET',\n          payload: {\n            voteCount: data.voteCount,\n            totalMembers: data.totalMembers,\n            votes,\n            stories,\n            activeStory\n          }\n        };\n      });\n    });\n    socket.on('votesRevealed', data => {\n      // Remove the active story from the stories array after votes are revealed\n      dispatch(prevState => {\n        var _prevState$activeStor;\n        const activeStoryId = (_prevState$activeStor = prevState.activeStory) === null || _prevState$activeStor === void 0 ? void 0 : _prevState$activeStor.id;\n        // Remove the active story from the stories array\n        const remainingStories = prevState.stories.filter(story => story.id !== activeStoryId);\n        // Set the next story as active, or null if none left\n        const nextActiveStory = remainingStories.length > 0 ? remainingStories[0] : null;\n        return {\n          type: 'SET',\n          payload: {\n            stories: remainingStories,\n            activeStory: nextActiveStory,\n            votes: {},\n            voteCount: 0,\n            totalMembers: prevState.totalMembers,\n            isRevealed: false\n          }\n        };\n      });\n    });\n    // votesCleared handler removed (feature deprecated)\n\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SessionContext.Provider, {\n    value: {\n      ...state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(SessionProvider, \"Pgz1L/7i03p6HU79hT0C3nopsWE=\");\n_c = SessionProvider;\nexport function useSession() {\n  _s2();\n  return useContext(SessionContext);\n}\n_s2(useSession, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"SessionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useRef","io","sessionAPI","jsxDEV","_jsxDEV","SessionContext","initialState","session","user","socket","stories","activeStory","votes","voteCount","totalMembers","isRevealed","reducer","state","action","type","payload","Array","isArray","members","SessionProvider","children","_s","_state$session","dispatch","sessionIdRef","current","id","on","updatedSession","getSession","activeStoryId","find","s","filter","Boolean","newActiveStory","length","data","prevState","_prevState$activeStor","remainingStories","story","nextActiveStory","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useSession","_s2","$RefreshReg$"],"sources":["C:/Users/abhis/Downloads/story-pointing-app/frontend/src/contexts/SessionContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { sessionAPI } from '../utils/api';\r\n\r\nconst SessionContext = createContext();\r\nconst initialState = {\r\n  session:null, user:null, socket:null,\r\n  stories:[], activeStory:null,\r\n  votes:{}, voteCount:0, totalMembers:0,\r\n  isRevealed:false\r\n};\r\n\r\nfunction reducer(state,action){\r\n  switch(action.type){\r\n    case 'SET': {\r\n      // Always ensure stories is an array if present\r\n      let payload = {...action.payload};\r\n      if ('stories' in payload && !Array.isArray(payload.stories)) {\r\n        payload.stories = [];\r\n      }\r\n      return {...state, ...payload};\r\n    }\r\n    case 'ADD_MEMBER': return {\r\n      ...state,\r\n      session:{...state.session,members:[...state.session.members,action.payload]}\r\n    };\r\n    case 'ADD_STORY':\r\n      // Add new story to the beginning of the array\r\n      return {...state,stories:[action.payload, ...state.stories]};\r\n    case 'SET_ACTIVE': return {...state,activeStory:action.payload};\r\n    case 'SET_VOTE_COUNT':\r\n      return {...state,voteCount:action.payload.voteCount,totalMembers:action.payload.totalMembers};\r\n    case 'SET_VOTES': return {...state,votes:action.payload};\r\n    case 'SET_REVEALED': return {...state,isRevealed:action.payload};\r\n    // CLEAR_VOTES feature removed\r\n    default: return state;\r\n  }\r\n}\r\n\r\n\r\n  export function SessionProvider({ children }) {\r\n    const [state,dispatch] = useReducer(reducer,initialState);\r\n  const sessionIdRef = useRef(null);\r\n  sessionIdRef.current = state.session?.id;\r\n\r\n  useEffect(()=>{\r\n    const socket = io('http://localhost:5000');\r\n    dispatch({type:'SET',payload:{socket}});\r\n\r\n    socket.on('memberJoined',async()=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        // Always show active story first\r\n        let stories = updatedSession.stories;\r\n        if (updatedSession.activeStoryId) {\r\n          const activeStory = updatedSession.stories.find(s => s.id === updatedSession.activeStoryId);\r\n          if (activeStory) {\r\n            stories = [activeStory, ...updatedSession.stories.filter(s => s.id !== activeStory.id)];\r\n          }\r\n        }\r\n        dispatch({type:'SET',payload:{session: updatedSession, stories}});\r\n      }\r\n    });\r\n    socket.on('storyCreated',async()=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        let stories = [...updatedSession.stories.filter(Boolean)];\r\n        let newActiveStory = null;\r\n        if (updatedSession.activeStoryId) {\r\n          newActiveStory = stories.find(s => s.id === updatedSession.activeStoryId) || null;\r\n        }\r\n        if (!newActiveStory && stories.length > 0) {\r\n          newActiveStory = stories[stories.length - 1];\r\n        }\r\n        // Move the new/active story to the top, but keep all stories\r\n        if (newActiveStory) {\r\n          stories = [newActiveStory, ...stories.filter(s => s.id !== newActiveStory.id)];\r\n        }\r\n        dispatch({type:'SET',payload:{\r\n          session: { ...updatedSession },\r\n          stories: [...stories],\r\n          activeStory: newActiveStory,\r\n          votes: {},\r\n          voteCount: 0,\r\n          totalMembers: 0,\r\n          isRevealed: false\r\n        }});\r\n      }\r\n    });\r\n    socket.on('activeStoryChanged',async id=>{\r\n      if(sessionIdRef.current) {\r\n        const updatedSession = await sessionAPI.getSession(sessionIdRef.current);\r\n        const newActiveStory = updatedSession.stories.find(s=>s.id===id) || null;\r\n        // Always set votes to the story's votes, regardless of reveal state\r\n        // Move the active story to the top of the list\r\n        const stories = [newActiveStory, ...updatedSession.stories.filter(s => s.id !== newActiveStory.id)];\r\n        dispatch({\r\n          type: 'SET',\r\n          payload: {\r\n            session: updatedSession,\r\n            stories,\r\n            activeStory: newActiveStory,\r\n            votes: newActiveStory?.votes || {},\r\n            voteCount: newActiveStory?.voteCount || 0,\r\n            isRevealed: !!newActiveStory?.isRevealed\r\n          }\r\n        });\r\n      }\r\n    });\r\n    socket.on('voteCountChanged',data=>{\r\n      // Update both voteCount/totalMembers and the votes object for real-time status\r\n      dispatch((prevState) => {\r\n        let activeStory = prevState.activeStory;\r\n        let stories = prevState.stories;\r\n        // Merge in the user's own vote if available (for instant feedback)\r\n        let votes = { ...prevState.votes, ...(data.votes || {}) };\r\n        if (activeStory && !stories.find(s => s.id === activeStory.id)) {\r\n          stories = [activeStory, ...stories];\r\n        }\r\n        return {\r\n          type: 'SET',\r\n          payload: {\r\n            voteCount: data.voteCount,\r\n            totalMembers: data.totalMembers,\r\n            votes,\r\n            stories,\r\n            activeStory\r\n          }\r\n        };\r\n      });\r\n    });\r\n    socket.on('votesRevealed',data=>{\r\n      // Remove the active story from the stories array after votes are revealed\r\n      dispatch((prevState) => {\r\n        const activeStoryId = prevState.activeStory?.id;\r\n        // Remove the active story from the stories array\r\n        const remainingStories = prevState.stories.filter(story => story.id !== activeStoryId);\r\n        // Set the next story as active, or null if none left\r\n        const nextActiveStory = remainingStories.length > 0 ? remainingStories[0] : null;\r\n        return {\r\n          type: 'SET',\r\n          payload: {\r\n            stories: remainingStories,\r\n            activeStory: nextActiveStory,\r\n            votes: {},\r\n            voteCount: 0,\r\n            totalMembers: prevState.totalMembers,\r\n            isRevealed: false\r\n          }\r\n        };\r\n      });\r\n    });\r\n    // votesCleared handler removed (feature deprecated)\r\n\r\n    return ()=>socket.disconnect();\r\n  },[]);\r\n\r\n  return (\r\n    <SessionContext.Provider value={{...state,dispatch}}>\r\n      {children}\r\n\r\n    </SessionContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useSession(){\r\n  return useContext(SessionContext);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}