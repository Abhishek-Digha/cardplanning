{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abhis\\\\Downloads\\\\story-pointing-app\\\\frontend\\\\src\\\\components\\\\AdminControls.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSession } from '../contexts/SessionContext';\nimport { sessionAPI } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminControls() {\n  _s();\n  const {\n    session,\n    user,\n    activeStory,\n    isRevealed,\n    dispatch,\n    votes\n  } = useSession();\n  // Force re-render on votes change\n  React.useEffect(() => {}, [votes]);\n\n  // Prevent rendering if required data is missing\n  if (!session || !user || !activeStory) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-controls\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: async () => {\n        var _updatedSession$stori;\n        await sessionAPI.revealVotes(session.id, activeStory.id, user.id);\n        // Fetch updated session to get revealed state and votes\n        const updatedSession = await sessionAPI.getSession(session.id);\n        // Update votes and isRevealed in context\n        dispatch({\n          type: 'SET',\n          payload: {\n            votes: ((_updatedSession$stori = updatedSession.stories.find(s => s.id === activeStory.id)) === null || _updatedSession$stori === void 0 ? void 0 : _updatedSession$stori.votes) || {},\n            isRevealed: true\n          }\n        });\n      },\n      disabled: isRevealed,\n      children: isRevealed ? 'Revealed' : 'Reveal Votes'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminControls, \"/fPYtxcI2gx1xfhzYGcgyzYyAHc=\", false, function () {\n  return [useSession];\n});\n_c = AdminControls;\nvar _c;\n$RefreshReg$(_c, \"AdminControls\");","map":{"version":3,"names":["React","useSession","sessionAPI","jsxDEV","_jsxDEV","AdminControls","_s","session","user","activeStory","isRevealed","dispatch","votes","useEffect","className","children","onClick","_updatedSession$stori","revealVotes","id","updatedSession","getSession","type","payload","stories","find","s","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/abhis/Downloads/story-pointing-app/frontend/src/components/AdminControls.js"],"sourcesContent":["import React from 'react';\r\nimport { useSession } from '../contexts/SessionContext';\r\nimport { sessionAPI } from '../utils/api';\r\n\r\nexport default function AdminControls(){\r\n  const {session,user,activeStory,isRevealed,dispatch,votes} = useSession();\r\n  // Force re-render on votes change\r\n  React.useEffect(() => {}, [votes]);\r\n\r\n  // Prevent rendering if required data is missing\r\n  if (!session || !user || !activeStory) return null;\r\n\r\n  return (\r\n    <div className=\"admin-controls\">\r\n      <button \r\n        onClick={async ()=>{\r\n          await sessionAPI.revealVotes(session.id,activeStory.id,user.id);\r\n          // Fetch updated session to get revealed state and votes\r\n          const updatedSession = await sessionAPI.getSession(session.id);\r\n          // Update votes and isRevealed in context\r\n          dispatch({type:'SET',payload:{votes: updatedSession.stories.find(s=>s.id===activeStory.id)?.votes || {}, isRevealed: true}});\r\n        }}\r\n        disabled={isRevealed}\r\n      >\r\n        {isRevealed?'Revealed':'Reveal Votes'}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,4BAA4B;AACvD,SAASC,UAAU,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,eAAe,SAASC,aAAaA,CAAA,EAAE;EAAAC,EAAA;EACrC,MAAM;IAACC,OAAO;IAACC,IAAI;IAACC,WAAW;IAACC,UAAU;IAACC,QAAQ;IAACC;EAAK,CAAC,GAAGX,UAAU,CAAC,CAAC;EACzE;EACAD,KAAK,CAACa,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAACD,KAAK,CAAC,CAAC;;EAElC;EACA,IAAI,CAACL,OAAO,IAAI,CAACC,IAAI,IAAI,CAACC,WAAW,EAAE,OAAO,IAAI;EAElD,oBACEL,OAAA;IAAKU,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7BX,OAAA;MACEY,OAAO,EAAE,MAAAA,CAAA,KAAU;QAAA,IAAAC,qBAAA;QACjB,MAAMf,UAAU,CAACgB,WAAW,CAACX,OAAO,CAACY,EAAE,EAACV,WAAW,CAACU,EAAE,EAACX,IAAI,CAACW,EAAE,CAAC;QAC/D;QACA,MAAMC,cAAc,GAAG,MAAMlB,UAAU,CAACmB,UAAU,CAACd,OAAO,CAACY,EAAE,CAAC;QAC9D;QACAR,QAAQ,CAAC;UAACW,IAAI,EAAC,KAAK;UAACC,OAAO,EAAC;YAACX,KAAK,EAAE,EAAAK,qBAAA,GAAAG,cAAc,CAACI,OAAO,CAACC,IAAI,CAACC,CAAC,IAAEA,CAAC,CAACP,EAAE,KAAGV,WAAW,CAACU,EAAE,CAAC,cAAAF,qBAAA,uBAArDA,qBAAA,CAAuDL,KAAK,KAAI,CAAC,CAAC;YAAEF,UAAU,EAAE;UAAI;QAAC,CAAC,CAAC;MAC9H,CAAE;MACFiB,QAAQ,EAAEjB,UAAW;MAAAK,QAAA,EAEpBL,UAAU,GAAC,UAAU,GAAC;IAAc;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACzB,EAAA,CAxBuBD,aAAa;EAAA,QAC0BJ,UAAU;AAAA;AAAA+B,EAAA,GADjD3B,aAAa;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}